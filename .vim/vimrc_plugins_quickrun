"------------------------------------------------------------
"quicklearnの設定
nnoremap <Leader>R :<C-u>Unite quicklearn -immediately<CR>

"------------------------------------------------------------
"quickrunの設定
if !exists('g:quickrun_config')
  let g:quickrun_config = {}
  let g:quickrun_config['*'] = {}
endif

"--------------------------------------
"markdownの設定
let g:quickrun_config['markdown'] = {
  \'type': 'markdown/kramdown',
  \'outputter': 'browser'
  \}

"--------------------------------------
"coffee-script
let g:quickrun_config['coffee'] = {
  \'command': 'coffee',
  \'exec'   : ['%c -cbp %s']
  \}

"Rspecのエラー行に飛ぶ =================================================
let g:quickrun_config['*'] = {'split': ''}
let g:quickrun_config['ruby.rspec'] = {'command': 'rspec'}

augroup RSpec
  autocmd!
  autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
augroup END

let g:my_outputter = quickrun#outputter#multi#new()
let g:my_outputter.config.targets = ["buffer", "quickfix"]

function! my_outputter.init(session)
  :cclose
  call call(quickrun#outputter#multi#new().init, [a:session], self)
endfunction

function! my_outputter.finish(session)
  call call(quickrun#outputter#multi#new().finish, [a:session], self)
  bwipeout [quickrun
  :HierUpdate
  :QuickfixStatusEnable
endfunction

call quickrun#register_outputter("my_outputter", my_outputter)
nmap <silent> <leader>r :QuickRun -outputter my_outputter<CR>
nmap <silent> <leader>m :QuickRun<CR>


